from flask import Flask, request, jsonify
import sqlite3
import logging

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

app = Flask(__name__)

# Database connection function
def get_db_connection():
    conn = sqlite3.connect('attendance.db')
    conn.row_factory = sqlite3.Row
    return conn

@app.route('/grant_access', methods=['POST'])
def grant_access():
    """
    Endpoint to grant access to a user.
    """
    try:
        user_id = request.json.get('user_id')
        if not user_id:
            return jsonify({"error": "User ID is required"}), 400

        # Logic to grant access (e.g., update database or call another module)
        logging.info(f"Access granted to user {user_id}")
        return jsonify({"status": f"Access granted to user {user_id}"})
    except Exception as e:
        logging.error(f"Error granting access: {e}")
        return jsonify({"error": "An error occurred while granting access"}), 500

@app.route('/get_attendance', methods=['GET'])
def get_attendance():
    """
    Endpoint to retrieve attendance records.
    """
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM attendance")
        rows = cursor.fetchall()
        conn.close()

        # Convert rows to a list of dictionaries
        attendance_records = [dict(row) for row in rows]
        return jsonify({"attendance_records": attendance_records})
    except Exception as e:
        logging.error(f"Error retrieving attendance records: {e}")
        return jsonify({"error": "An error occurred while retrieving attendance records"}), 500

@app.route('/mark_attendance', methods=['POST'])
def mark_attendance():
    """
    Endpoint to mark attendance for a user.
    """
    try:
        user_id = request.json.get('user_id')
        if not user_id:
            return jsonify({"error": "User ID is required"}), 400

        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("INSERT INTO attendance (name, timestamp) VALUES (?, datetime('now'))", (user_id,))
        conn.commit()
        conn.close()

        logging.info(f"Attendance marked for user {user_id}")
        return jsonify({"status": f"Attendance marked for user {user_id}"})
    except Exception as e:
        logging.error(f"Error marking attendance: {e}")
        return jsonify({"error": "An error occurred while marking attendance"}), 500

if __name__ == '__main__':
    app.run(debug=True)